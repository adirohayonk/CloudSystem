import sys
sys.path.append('../lib/')
import socket 
import re
import subprocess
import socketLib as sockTools

def sendUDPPacket(data):
    sock = sockTools.create_socket(isTCP = False)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    #extracting broadcast address
    unparsedIpOutput = subprocess.check_output(["ip", "a"])
    splitted = re.findall( r'brd [\d.-]+ scope', str(unparsedIpOutput))
    broadCastAddress = splitted[0].split()[1]
    port = 4444
    data = data.encode()
    sock.sendto(data, (broadCastAddress, port))


def receiveDiscoverInfo():
    ip = "0.0.0.0"
    port = 4444
    sock = sockTools.create_socket(isTCP = False)
    sock.bind((ip, port))
    while True:
        data = sock.recvfrom(1024)
        data = str(data)
        if data[0:10] == "discovered":
            information = data.split(":")
            break 
    return information


def receiveDiscoverPacket():
    ip = "0.0.0.0"
    port = 4444 
    sock = sockTools.create_socket(isTCP = False)
    sock.bind((ip, port))
    while True:
        data = sock.recvfrom(1024)
        data = str(data)
        print(data)
        print(data[0:8])
        if (data.find("discover")) == 0
            information = gatherInformation()
            break
    return(information.encode()) 

def main():
    if sys.argv[1] == "a":
        sendUDPPacket("discover")
    elif sys.argv[1] == "b": 
        a = receiveDiscoverPacket()
        print(a)
        sendUDPPacket("discovered"+":"+a)
    else:
        receiveDiscoverInfo()


if __name__ == "__main__":
   main() 