#!/usr/bin/python

import sys
sys.path.append('../lib/')
import socket
import threading
import socketLib as sockTools
import fileManagementLib as fileM

CHUNK_SIZE = 8 * 1024


class managerService(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.mySocket = sockTools.create_and_bind_socket(self.host, self.port)
        fileM.createEnv()

    def listen(self):
        self.mySocket.listen(5)
        print("Server Started")
        while True:
            client_socket, address = self.mySocket.accept()
            client_socket.settimeout(60)
            threading.Thread(target=self.listen_to_client, args=(client_socket, address)).start()

    def listen_to_client(self, client_socket, address):
        while True:
            try:
                data_from_client = sockTools.recv_and_decode(client_socket)
                print("data:" + data_from_client)
                if data_from_client == "":
                    print("{} Disconnected".format(address))
                    client_socket.close()
                    return False
                if data_from_client == "sendFile":
                    self.receive_file_from_client(client_socket, address)
                if data_from_client == "newWorker":
                    self.add_new_worker(client_socket)
                if data_from_client == "receiveResults":
                    self.add_new_worker(client_socket)

            except socket.error:
                print("{} Disconnected".format(address))
                client_socket.close()
                return False

    def receive_file_from_client(self, client_socket, address):
        sockTools.send_and_encode(client_socket, "Please send the file...")
        sockTools.receiveFile(client_socket, address[0])

    def add_new_worker(self, client_socket):
        filename = client_socket.recv_and_decode(client_socket)


if __name__ == "__main__":
    port_num = 4444
    managerService('0.0.0.0', port_num).listen()
