#!/usr/bin/python

import socket
import threading
import socketLib as sockTools


class workerService(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.mySocket = sockTools.create_and_bind_socket(self.host, self.port)

    def listen(self):
        self.sock.listen(5)
        print("Worker service started")
        while True:
            server_socket, address = self.mySocket.accept()
            server_socket.settimeout(60)
            threading.Thread(target=self.listen_to_server, args=(server_socket, address)).start()

    def listen_to_server(self, server_socket, address):
        while True:
            try:
                data_from_server = sockTools.recv_and_decode(server_socket)
                print("data:" + data_from_server)
                if data_from_server == "":
                    print("{} Disconnected".format(address))
                    server_socket.close()
                    return False
                if data_from_server == "sendFile":
                    self.receive_file_from_server(server_socket, address)
                if data_from_server == "receiveResults":
                    self.add_new_worker(server_socket)
            except socket.error:
                print("{} Disconnected".format(address))
                server_socket.close()
                return False

    def receive_file_from_server(self, server_socket, address):
        sockTools.send_and_encode(server_socket, "Please send the file...")
        sockTools.receiveFile(server_socket, address[0])


if __name__ == "__main__":
    port_num = 4444
    ThreadedServer('0.0.0.0', port_num).listen()
