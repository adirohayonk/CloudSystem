#!/usr/bin/python

import sys
sys.path.append('../lib/')
import socket
import sys
import socketLib as sockTools
import argparse
import databaseLib
import prettytable


def main():
	parser = argparse.ArgumentParser(description='Provides many options for controlling and managing jobs on CloudSystem.') 
	parser.add_argument('-f', '--file', metavar='[File]',
		help="File name contains the script to upload to the server")
	parser.add_argument('-n', '--newWorker', default=False, action="store_true",
		help="Add this machine as a new worker")
	parser.add_argument('-l', '--listOfJobs', default=False, 
	action="store_true",
		help="Receive list of status jobs from the manager")
	parser.add_argument('-j', '--jobInfo', metavar='JobID',
		help="Receive job information for specific job")
	parser.add_argument('-st', '--status', metavar='STATUS',
		help="configure specific status for listOfJobs")
	parser.add_argument('-s', '--server', metavar='ServerIP', default="127.0.0.1",
		help="Ip address of the manager (default: 127.0.0.1)")
	parser.add_argument('-p', '--port', metavar='PORT', default=4444,
		help="Port of the manager (default: 4444)")
	parser.add_argument('-g', '--getResults', metavar='JobID',
		help="get job result file")
	arguments = parser.parse_args()
	host = arguments.server
	port = arguments.port
	sock = socket.socket()
	sock.connect((host, port))
	db = databaseLib.DbController(host) #get controller for the db
	pp = prettytable.PrettyTable(["JobID", "fileName", "hostname", "status"])
	
	if arguments.listOfJobs:
		if not arguments.status:
			jobData = db.get_jobs_data("status")
		else:
			jobData = db.get_jobs_data("'{}'".format(arguments.status))
		for data in jobData:
			pp.add_row(data)
		print(pp)
	elif arguments.jobInfo:
		jobData = db.get_job_data(arguments.jobInfo)
		pp.add_row(jobData)
		print(pp)
	elif arguments.newWorker:
		print("newWorker implementation")
	elif arguments.file:
		sockTools.sendFile(sock, arguments.file, "./")
	elif arguments.getResults:
		sockTools.send_and_encode(sock, "receiveResults")
		response = sockTools.recv_and_decode(sock)
		if response[:6] == "please":
			sockTools.send_and_encode(sock, arguments.getResults)
		response = sockTools.recv_and_decode(sock)
		print(response)
		a = input()
		if a[:1] == "y":
			sockTools.send_and_encode(sock, a)
			sockTools.receiveFile(sock)
			print("Sdf")


if __name__ == "__main__":
	main()
	
